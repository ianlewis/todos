# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  release:
    types: [created]

permissions: {}

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate the release and generate ldflags dynamically.
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tag: ${{ steps.ldflags.outputs.tag }}
      version: ${{ steps.ldflags.outputs.version }}
    steps:
      - id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: ".node-version"
      - id: ldflags
        run: |
          set -euo pipefail

          version_tag=$(git describe --tags --always --dirty)
          version=$(echo "${version_tag}" | sed -E 's/^v([0-9]+.[0-9]+.[0-9]+.*)/\1/')
          exit_code=0
          if ! grep "${version_tag}" CHANGELOG.md >/dev/null; then
            echo >&2 "${version_tag} must be included in the CHANGELOG.md"
            exit_code=1
          fi

          # Check the npm package versions.
          npm_version=$(npm version --json | jq -r ".\"@ianlewis/todos\"")
          if [[ "${npm_version}" != "${version}" ]]; then
            echo >&2 "npm package @ianlewis/todos version ${npm_version} does not match release version ${version}"
            exit_code=1
          fi

          # Check the sub-package versions.
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              npm_version=$(cd "packages/todos-${os}-${arch}" && npm version --json | jq -r ".\"@ianlewis/todos-${os}-${arch}\"")
              if [[ "${npm_version}" != "${version}" ]]; then
                echo >&2 "npm package @ianlewis/todos-${os}-${arch} version ${npm_version} does not match release version ${version}"
                exit_code=1
              fi
            done
          done

          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "tag=${version_tag}" >> "$GITHUB_OUTPUT"
          exit "${exit_code}"

  build-todos:
    name: todos-${{matrix.os}}-${{matrix.arch}}
    needs: [validate]
    strategy:
      matrix:
        os:
          - linux
          - windows
          - darwin
        arch:
          - amd64
          - arm64
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read # To read workflow path.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0
    with:
      go-version-file: "go.mod"
      config-file: ".slsa-goreleaser/todos-${{matrix.os}}-${{matrix.arch}}.yml"
      evaluated-envs: "VERSION:${{needs.validate.outputs.tag}}"

  npm-publish:
    needs: [validate, build-todos]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # To sign.
    steps:
      - id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Download todos-linux-amd64
        id: download-linux-amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-amd64

      - name: Download todos-linux-amd64.intoto.jsonl
        id: download-linux-amd64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-amd64.intoto.jsonl

      - name: Download todos-linux-arm64
        id: download-linux-arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-arm64

      - name: Download todos-linux-arm64.intoto.jsonl
        id: download-linux-arm64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-arm64.intoto.jsonl

      - name: Download todos-darwin-amd64
        id: download-darwin-amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-darwin-amd64

      - name: Download todos-darwin-amd64.intoto.jsonl
        id: download-darwin-amd64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-darwin-amd64.intoto.jsonl

      - name: Download todos-darwin-arm64
        id: download-darwin-arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-darwin-arm64

      - name: Download todos-darwin-arm64.intoto.jsonl
        id: download-darwin-arm64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-darwin-arm64.intoto.jsonl

      - name: Download todos-windows-amd64.exe
        id: download-windows-amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-windows-amd64.exe

      - name: Download todos-windows-amd64.exe.intoto.jsonl
        id: download-windows-amd64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-windows-amd64.exe.intoto.jsonl

      - name: Download todos-windows-arm64.exe
        id: download-windows-arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-windows-arm64.exe

      - name: Download todos-windows-arm64.exe.intoto.jsonl
        id: download-windows-arm64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-windows-arm64.intoto.exe.jsonl

      - name: Install slsa-verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.0

      - name: Verify artifact provenance
        env:
          TAG: ${{ needs.validate.outputs.tag }}
        run: |
          set -euo pipefail

          # Verify the provenance of the downloaded binaries.
          for arch in amd64 arm64; do
            artifact="todos-linux-${arch}"
            provenance_file="${artifact}.intoto.jsonl"
            slsa-verifier verify-artifact \
              --builder-id "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml" \
              --provenance-path "${provenance_file}" \
              --source-uri "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
              --source-tag "${TAG}" \
              "${artifact}"
          done

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
          VERSION: ${{ needs.validate.outputs.version }}
        run: |
          set -euo pipefail

          # Publish first package to npm.
          npm publish \
            --provenance \
            --access public \
            --tag "${VERSION}"

          # Publish all sub-packages to npm.
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              artifact="todos-${os}-${arch}"
              if [[ "${os}" == "windows" ]]; then
                artifact="${artifact}.exe"
              fi
              cp "${artifact}" "packages/todos-${os}-${arch}/"
              (
                cd "packages/todos-${os}-${arch}"
                npm publish \
                  --provenance \
                  --access public \
                  --tag "${VERSION}"
              )
            done
          done

  # This step builds our image, pushes it, and outputs the repo hash digest.
  docker-build:
    needs: [validate, build-todos]
    permissions:
      contents: read # for checking out the repo.
      packages: write # for pushing the image to the registry.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          # NOTE: Do not use the cached binary for buildx to avoid potential
          # cache poisoning.
          cache-binary: false

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          echo "image=${IMAGE_REGISTRY}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Download todos-linux-amd64
        id: download-linux-amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-amd64

      - name: Download todos-linux-amd64.intoto.jsonl
        id: download-linux-amd64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-amd64.intoto.jsonl

      - name: Download todos-linux-arm64
        id: download-linux-arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-arm64

      - name: Download todos-linux-arm64.intoto.jsonl
        id: download-linux-arm64-provenance
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: todos-linux-arm64.intoto.jsonl

      - name: Install slsa-verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.0

      - name: Verify artifact provenance
        env:
          TAG: ${{ needs.validate.outputs.tag }}
        run: |
          set -euo pipefail

          # Verify the provenance of the downloaded binaries.
          for arch in amd64 arm64; do
            artifact="todos-linux-${arch}"
            provenance_file="${artifact}.intoto.jsonl"
            slsa-verifier verify-artifact \
              --builder-id "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml" \
              --provenance-path "${provenance_file}" \
              --source-uri "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
              --source-tag "${TAG}" \
              "${artifact}"
          done

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [docker-build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.docker-build.outputs.image }}
      digest: ${{ needs.docker-build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
