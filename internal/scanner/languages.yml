# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
Assembly:
  line_comment_start: [";"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: none
    - start: "'"
      end: "'"
      escape: none
C:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
C++:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
C#:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Clojure:
  line_comment_start: [";"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
CoffeeScript:
  line_comment_start: ["#"]
  multiline_comment:
    start: "###"
    end: "###"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Dockerfile:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Emacs Lisp:
  line_comment_start: [";"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
Erlang:
  line_comment_start: ["%"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Fortran:
  line_comment_start: ["!"]
  strings:
    - start: '"'
      end: '"'
      escape: none
    - start: "'"
      end: "'"
      escape: none
Fortran Free Form:
  line_comment_start: ["!"]
  strings:
    - start: '"'
      end: '"'
      escape: none
    - start: "'"
      end: "'"
      escape: none
Go:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    # Rune
    - start: "'"
      end: "'"
      escape: character \
    # Raw strings
    - start: "`"
      end: "`"
      escape: none
Go Module:
  # NOTE: See https://go.dev/ref/mod#go-mod-file-lexical
  # NOTE: go.sum (Go Checksums) don't support comments.
  line_comment_start: ["//"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    # Raw strings
    - start: "`"
      end: "`"
      escape: none
Groovy:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
    - start: "'''"
      end: "'''"
      escape: character \
Haskell:
  line_comment_start: ["--"]
  multiline_comment:
    start: "{-"
    end: "-}"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
HTML:
  multiline_comment:
    start: "<!--"
    end: "--!>"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Java:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
JavaScript:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
# NOTE: Some JSON files support JS comments (e.g. tsconfig.json)
# NOTE: HOCON format allows # comments (github.com/lightbend/config/blob/master/HOCON.md)
JSON:
  line_comment_start: ["//", "#"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Kotlin:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Lua:
  line_comment_start: ["--"]
  multiline_comment:
    start: "--[["
    end: "--]]"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Makefile:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
MATLAB:
  line_comment_start: ["%"]
  multiline_comment:
    start: "%{"
    end: "}%"
  strings:
    # Strings
    - start: '"'
      end: '"'
      escape: character \
    # Character vectors
    - start: "'"
      end: "'"
      escape: character \
Objective-C:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Perl:
  line_comment_start: ["#"]
  multiline_comment:
    start: "="
    end: "=cut"
    at_line_start: true
  strings:
    # TODO(#357): Perl supports strings with any delimiter.
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
PHP:
  line_comment_start: ["#", "//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
PowerShell:
  line_comment_start: ["#"]
  multiline_comment:
    start: "<#"
    end: "#>"
  strings:
    - start: '"'
      end: '"'
      escape: character `
    - start: "'"
      end: "'"
      escape: character `
Puppet:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Python:
  line_comment_start: ["#"]
  multiline_comment:
    start: '"""'
    end: '"""'
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
R:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Ruby:
  line_comment_start: ["#"]
  multiline_comment:
    start: "=begin"
    end: "=end"
    at_line_start: true
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
    - start: "%{"
      end: "}"
      escape: character \
Rust:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Scala:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Shell:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
Swift:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
SQL:
  line_comment_start: ["--"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: double
    - start: "'"
      end: "'"
      escape: double
TOML:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
TypeScript:
  line_comment_start: ["//"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
TeX:
  line_comment_start: ["%"]
Unix Assembly:
  line_comment_start: [";"]
  multiline_comment:
    start: "/*"
    end: "*/"
  strings:
    - start: '"'
      end: '"'
      escape: none
    - start: "'"
      end: "'"
      escape: none
Vim Script:
  line_comment_start: ['"']
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
VBA:
  line_comment_start: ["'"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
Visual Basic .NET:
  line_comment_start: ["'"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
XML:
  multiline_comment:
    start: "<!--"
    end: "--!>"
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
YAML:
  line_comment_start: ["#"]
  strings:
    - start: '"'
      end: '"'
      escape: character \
    - start: "'"
      end: "'"
      escape: character \
